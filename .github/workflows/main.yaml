name: main

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version from upstream (optional). If empty, mirror latest on PyPI."
        required: false
        default: ""

concurrency:
  group: mirror
  cancel-in-progress: false

jobs:
  build:
    name: main
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need tags & history

      - name: Capture version input (if any)
        run: echo "PAYLOAD_VERSION=${{ github.event.inputs.version }}" >> "$GITHUB_ENV"

      - name: Configure git author
        run: |
          git config --global user.email "release-bot@example.com"
          git config --global user.name "Release Bot"

      - name: Sync mirror
        run: ./sync.sh
        env:
          PAYLOAD_VERSION: ${{ env.PAYLOAD_VERSION }}

      - name: Check for unpushed commits
        id: check_unpushed
        run: |
          git fetch origin main --tags
          if [ -z "$(git log origin/main..HEAD)" ]; then
            echo "changes_exist=false" >> $GITHUB_ENV
            echo "No unpushed commits found."
          else
            echo "changes_exist=true" >> $GITHUB_ENV
            echo "Unpushed commits found."
          fi

      - name: Push changes (branch + tags)
        if: env.changes_exist == 'true'
        run: |
          git push origin HEAD:main
          git push origin --tags

      - name: Create GitHub Release
        if: env.changes_exist == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${PAYLOAD_VERSION:+v$PAYLOAD_VERSION}"
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME="$(git describe --tags "$(git rev-list --tags --max-count=1)")"
          fi
          echo "Releasing tag: $TAG_NAME"
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes "See: https://github.com/simone-viozzi/rusty-todo-md/releases/tag/${TAG_NAME#v}" \
            --latest
